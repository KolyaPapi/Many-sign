
pragma solidity ^0.8.0;

contract MultiSigWallet {
    address[] public owners;
    mapping(address => bool) public isOwner;
    uint256 public numConfirmationsRequired;
    mapping(address => bool) public isConfirmed;
    mapping(uint256 => mapping(address => bool)) public isTransactionConfirmed;
    uint256 public transactionCount;

    struct Transaction {
        address payable to;
        uint256 value;
        bool executed;
    }

    mapping(uint256 => Transaction) public transactions;

    event Deposit(address indexed sender, uint256 value);
    event TransactionCreated(uint256 indexed transactionId, address indexed to, uint256 value);
    event TransactionConfirmed(uint256 indexed transactionId, address indexed sender);
    event TransactionExecuted(uint256 indexed transactionId, address indexed executor);

    modifier onlyOwner() {
        require(isOwner[msg.sender], "Only an owner can call this function.");
        _;
    }

    constructor(address[] memory _owners, uint256 _numConfirmationsRequired) {
        require(_owners.length > 0, "At least one owner is required.");
        require(
            _numConfirmationsRequired > 0 && _numConfirmationsRequired <= _owners.length,
            "Invalid number of confirmations required."
        );

        for (uint256 i = 0; i < _owners.length; i++) {
            address owner = _owners[i];
            require(owner != address(0), "Invalid owner address.");
            require(!isOwner[owner], "Duplicate owner address.");

            isOwner[owner] = true;
            owners.push(owner);
        }

        numConfirmationsRequired = _numConfirmationsRequired;
    }

    function deposit() public payable {
        emit Deposit(msg.sender, msg.value);
    }

    function createTransaction(address payable _to, uint256 _value) public onlyOwner {
        uint256 transactionId = transactionCount++;

        transactions[transactionId] = Transaction({
            to: _to,
            value: _value,
            executed: false
        });

        emit TransactionCreated(transactionId, _to, _value);
    }

    function confirmTransaction(uint256 _transactionId) public onlyOwner {
        require(transactions[_transactionId].to != address(0), "Transaction does not exist.");
        require(!isTransactionConfirmed[_transactionId][msg.sender], "Transaction already confirmed.");

        isTransactionConfirmed[_transactionId][msg.sender] = true;
        isConfirmed[msg.sender] = true;

        emit TransactionConfirmed(_transactionId, msg.sender);

        if (isConfirmedByRequiredOwners(_transactionId)) {
            executeTransaction(_transactionId);
        }
    }

    function executeTransaction(uint256 _transactionId) public onlyOwner {
        require(transactions[_transactionId].to != address(0), "Transaction does not exist.");
        require(!transactions[_transactionId].executed, "Transaction already executed.");
        require(isConfirmedByRequiredOwners(_transactionId), "Transaction not confirmed by required owners.");

        Transaction storage transaction = transactions[_transactionId];
        transaction.executed = true;

        (bool success, ) = transaction.to.call{value: transaction.value}("");
        require(success, "Transaction execution failed.");

        emit TransactionExecuted(_transactionId, msg.sender);
    }

    function isConfirmedByRequiredOwners(uint256 _transactionId) private view returns (bool) {
        uint256 confirmationCount = 0;

        for (uint256 i = 0; i < owners.length; i++) {
            if (isTransactionConfirmed[_transactionId][owners[i]]) {
                confirmationCount++;
            }

            if (confirmationCount == numConfirmationsRequired) {
                return true;
            }
        }

        return false;
    }
}
